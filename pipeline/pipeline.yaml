AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Environment:
    Type: String
    Description:
      Enter the environment name for which to run this deployment.
    AllowedValues:
      - staging
      - development
      - production
  LambdaFunctionName:
    Type: String
    Description: 'Function Name of the Lambda to trigger'
    AllowedValues:
      - Development-Lambda
      - Staging-Lambda
      - Production-Lambda
  RepositoryName:
    Type: String
    Description: 'Name of the CodeCommit Repo'
    AllowedValues:
      - Development-Repo
      - Staging-Repo
      - Production-Repo
Conditions:
  IsStaging: !Equals [!Ref Environment, staging]
  IsProduction: !Equals [!Ref Environment, production]
Resources:
  # A S3 bucket that is used to save the artifacts of the pipeline stages temporarily
  PipelineArtifactBucket:
    Type: 'AWS::S3::Bucket'
  # ----------------------------------------------
  # This is the actual pipeline with multiple steps (stages)
  # ----------------------------------------------
  DeployPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket # Here we use the S3 bucket for the artifacts
      Name: !Join
        - '-'
        - - !Ref Environment
          - Pipeline
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt PipelineRole.Arn # this references the IAM role used to execute the pipeline
      Stages:
        - Name: Source # In this stage code is checked out from CodeCommit whenever the source code is updated in specific branches
          Actions:
            - Name: CodeCommit
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                PollForSourceChanges: false
                RepositoryName: !Ref RepositoryName
                BranchName: !If
                  - IsStaging
                  - staging
                  - !If
                    - IsProduction
                    - production
                    - master
              OutputArtifacts:
                - Name: SourceCode # The source code of the repo is saved to S3 (ArtifactStore) and made available for the next stage
        - Name: Package # In this stage CodeBuild uses the buildspec.yml to build the node.js application and transform the template.yaml to a proper format for the following stage
          Actions:
            - Name: PackageAndPrepareTemplate
              InputArtifacts:
                - Name: SourceCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref PackageAndPrepareTemplate
              OutputArtifacts:
                - Name: PackagedApp
        - Name: BootstrapEnvironment # In this stage CloudFormation creates a changeset (= diff) of all resources that are defined in the template.yaml and creates or updates the ones that have changed
          Actions:
            - Name: CloudFormationCreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              RunOrder: 5
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Join
                  - '-'
                  - - 'VPC-Stack'
                    - !Ref Environment
                Capabilities: CAPABILITY_IAM
                ChangeSetName: to-be-executed
                TemplateConfiguration: 'PackagedApp::template.config.json'
                TemplatePath: 'PackagedApp::template.prepared.yaml'
                OutputFileName: 'CreateChangesetOutput.json'
              InputArtifacts:
                - Name: PackagedApp
              OutputArtifacts:
                - Name: StackChangeset
            - Name: CloudFormationExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              RunOrder: 10
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Join
                  - '-'
                  - - 'VPC-Stack'
                    - !Ref Environment
                ChangeSetName: to-be-executed
                Capabilities: CAPABILITY_IAM
                OutputFileName: 'ExecuteChangesetOutput.json'
              OutputArtifacts:
                - Name: StackExecution
        - Name: ExternalLambda
          Actions:
            - Name: TriggerLambda
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              RunOrder: 1
              Configuration:
                FunctionName: !Ref LambdaFunctionName
              OutputArtifacts: []
              InputArtifacts: []
  # CodeBuild is used with a node.js docker image to build the project
  PackageAndPrepareTemplate:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: 'Build and deploy Backend artifact to S3 bucket'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/nodejs:8.11.0'
        Type: LINUX_CONTAINER
        EnvironmentVariables: # Two environment variables: The S3 bucket for artifacts and the environment (development, staging, production)
          - Name: ARTIFACT_BUCKET
            Type: PLAINTEXT
            Value: !Ref PipelineArtifactBucket
          - Name: ENV
            Type: PLAINTEXT
            Value: !Ref Environment
      Name: !Join
        - '-'
        - - !Ref Environment
          - 'build'
      ServiceRole: !GetAtt CodeBuildRole.Arn # The IAM role for CodeBuild
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: 'buildspec.yml'  # The buildspec.yml contains the single steps to build the node.js app
      Cache:
        Type: NO_CACHE
  CodeCommitRepository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      RepositoryName: !Ref RepositoryName
  # The trigger that starts the pipeline execution whenever there is a commit in one of the following CodeCommit repository branches: master, staging, production
  CodeCommitTrigger:
    Type: 'AWS::Events::Rule'
    Properties:
      Targets:
        - Id: CodePipelineTrigger
          RoleArn: !GetAtt CodeCommitTriggerCodePipelineRole.Arn
          Arn: !Join
            - ':'
            - - 'arn:aws:codepipeline'
              - !Ref 'AWS::Region'
              - !Ref 'AWS::AccountId'
              - !Ref DeployPipeline
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt CodeCommitRepository.Arn
          - !Join
            - ':'
            - - 'arn:aws:codecommit'
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - !Ref RepositoryName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !If
              - IsStaging # For PPNLite the staging branch is used
              - staging
              - !If
                - IsProduction # For PPN the production branch is used
                - production
                - master # Default is the master branch for the dev environment
  # Role used by CloudFormation to perform deployment actions (manage resources)
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt PipelineRole.Arn
            Action: 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  # The role for the CodeCommit trigger that allows to create AWS events and start the pipeline execution
  CodeCommitTriggerCodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchCodePipelineEventTriggerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codepipeline:StartPipelineExecution'
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:codepipeline'
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - !Ref DeployPipeline
  # Role for CodeBuild to allow access to S3, get stack information from cloudformation, logging, get system manager parameters
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # Description: 'role used in trust relationship with CodeBuild'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      Policies:
        - PolicyName: !Join
            - '-'
            - - !Ref Environment
              - 'CodeBuildPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:cloudformation'
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - !Join
                        - ''
                        - - 'stack/'
                          - !Ref Environment
                          - '/*'
                Action:
                  - cloudformation:DescribeStacks
              - Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:logs:'
                      - !Ref AWS::Region
                      - ':'
                      - !Ref AWS::AccountId
                      - ':log-group:/aws/codebuild/'
                      - !Join
                        - '-'
                        - - !Ref Environment
                          - 'build'
                  - !Join
                    - ''
                    - - 'arn:aws:logs:'
                      - !Ref AWS::Region
                      - ':'
                      - !Ref AWS::AccountId
                      - ':log-group:/aws/codebuild/'
                      - !Join
                        - '-'
                        - - !Ref Environment
                          - 'build'
                      - ':*'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource:
                  - !Join
                    - '-'
                    - - 'arn:aws:s3:::codepipeline'
                      - !Ref AWS::Region
                      - '*'
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: !Join
                  - ':'
                  - - 'arn:aws:ssm'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'parameter/CodeBuild/*'
  # Role for the deployment of the pipeline
  PipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: FrontEndCodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::codepipeline*'
                  - 'arn:aws:s3:::elasticbeanstalk*'
                Effect: Allow
              - Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'opsworks:CreateDeployment'
                  - 'opsworks:DescribeApps'
                  - 'opsworks:DescribeCommands'
                  - 'opsworks:DescribeDeployments'
                  - 'opsworks:DescribeInstances'
                  - 'opsworks:DescribeStacks'
                  - 'opsworks:UpdateApp'
                  - 'opsworks:UpdateStack'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:ValidateTemplate'
                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
                Effect: Allow
